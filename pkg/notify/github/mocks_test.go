// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package github_test

import (
	"context"
	v48github "github.com/google/go-github/v48/github"
	notifygithub "github.com/xabi93/go-coverage-report/pkg/notify/github"
	"sync"
)

// Ensure, that CheckCreatorMock does implement notifygithub.CheckCreator.
// If this is not the case, regenerate this file with moq.
var _ notifygithub.CheckCreator = &CheckCreatorMock{}

// CheckCreatorMock is a mock implementation of notifygithub.CheckCreator.
//
//	func TestSomethingThatUsesCheckCreator(t *testing.T) {
//
//		// make and configure a mocked notifygithub.CheckCreator
//		mockedCheckCreator := &CheckCreatorMock{
//			CreateCheckRunFunc: func(ctx context.Context, owner string, repo string, opts v48github.CreateCheckRunOptions) (*v48github.CheckRun, *v48github.Response, error) {
//				panic("mock out the CreateCheckRun method")
//			},
//		}
//
//		// use mockedCheckCreator in code that requires notifygithub.CheckCreator
//		// and then make assertions.
//
//	}
type CheckCreatorMock struct {
	// CreateCheckRunFunc mocks the CreateCheckRun method.
	CreateCheckRunFunc func(ctx context.Context, owner string, repo string, opts v48github.CreateCheckRunOptions) (*v48github.CheckRun, *v48github.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCheckRun holds details about calls to the CreateCheckRun method.
		CreateCheckRun []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
			// Opts is the opts argument value.
			Opts v48github.CreateCheckRunOptions
		}
	}
	lockCreateCheckRun sync.RWMutex
}

// CreateCheckRun calls CreateCheckRunFunc.
func (mock *CheckCreatorMock) CreateCheckRun(ctx context.Context, owner string, repo string, opts v48github.CreateCheckRunOptions) (*v48github.CheckRun, *v48github.Response, error) {
	callInfo := struct {
		Ctx   context.Context
		Owner string
		Repo  string
		Opts  v48github.CreateCheckRunOptions
	}{
		Ctx:   ctx,
		Owner: owner,
		Repo:  repo,
		Opts:  opts,
	}
	mock.lockCreateCheckRun.Lock()
	mock.calls.CreateCheckRun = append(mock.calls.CreateCheckRun, callInfo)
	mock.lockCreateCheckRun.Unlock()
	if mock.CreateCheckRunFunc == nil {
		var (
			checkRunOut *v48github.CheckRun
			responseOut *v48github.Response
			errOut      error
		)
		return checkRunOut, responseOut, errOut
	}
	return mock.CreateCheckRunFunc(ctx, owner, repo, opts)
}

// CreateCheckRunCalls gets all the calls that were made to CreateCheckRun.
// Check the length with:
//
//	len(mockedCheckCreator.CreateCheckRunCalls())
func (mock *CheckCreatorMock) CreateCheckRunCalls() []struct {
	Ctx   context.Context
	Owner string
	Repo  string
	Opts  v48github.CreateCheckRunOptions
} {
	var calls []struct {
		Ctx   context.Context
		Owner string
		Repo  string
		Opts  v48github.CreateCheckRunOptions
	}
	mock.lockCreateCheckRun.RLock()
	calls = mock.calls.CreateCheckRun
	mock.lockCreateCheckRun.RUnlock()
	return calls
}
